{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ec7f1b59",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-18T16:40:32.009984Z",
     "iopub.status.busy": "2024-07-18T16:40:32.009547Z",
     "iopub.status.idle": "2024-07-18T16:40:33.071612Z",
     "shell.execute_reply": "2024-07-18T16:40:33.070249Z"
    },
    "papermill": {
     "duration": 1.072842,
     "end_time": "2024-07-18T16:40:33.074438",
     "exception": false,
     "start_time": "2024-07-18T16:40:32.001596",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/naijasenti-hausa/hau_stop.csv\n",
      "/kaggle/input/naijasenti-hausa/hau/hau/test.tsv\n",
      "/kaggle/input/naijasenti-hausa/hau/hau/dev.tsv\n",
      "/kaggle/input/naijasenti-hausa/hau/hau/train.tsv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "acdf5413",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-18T16:40:33.088660Z",
     "iopub.status.busy": "2024-07-18T16:40:33.088115Z",
     "iopub.status.idle": "2024-07-18T16:40:34.516606Z",
     "shell.execute_reply": "2024-07-18T16:40:34.515477Z"
    },
    "papermill": {
     "duration": 1.438689,
     "end_time": "2024-07-18T16:40:34.519423",
     "exception": false,
     "start_time": "2024-07-18T16:40:33.080734",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.metrics import accuracy_score, classification_report, recall_score, precision_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "49dffb81",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-18T16:40:34.533683Z",
     "iopub.status.busy": "2024-07-18T16:40:34.533249Z",
     "iopub.status.idle": "2024-07-18T16:40:34.665677Z",
     "shell.execute_reply": "2024-07-18T16:40:34.664685Z"
    },
    "papermill": {
     "duration": 0.142997,
     "end_time": "2024-07-18T16:40:34.668521",
     "exception": false,
     "start_time": "2024-07-18T16:40:34.525524",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data = pd.read_csv('/kaggle/input/naijasenti-hausa/hau/hau/train.tsv', sep='\\t')\n",
    "dev_data = pd.read_csv('/kaggle/input/naijasenti-hausa/hau/hau/dev.tsv', sep='\\t')\n",
    "test_data = pd.read_csv('/kaggle/input/naijasenti-hausa/hau/hau/test.tsv', sep='\\t')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "161a0a46",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-18T16:40:34.682628Z",
     "iopub.status.busy": "2024-07-18T16:40:34.681920Z",
     "iopub.status.idle": "2024-07-18T16:40:34.704660Z",
     "shell.execute_reply": "2024-07-18T16:40:34.703252Z"
    },
    "papermill": {
     "duration": 0.03298,
     "end_time": "2024-07-18T16:40:34.707573",
     "exception": false,
     "start_time": "2024-07-18T16:40:34.674593",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>@user Da kudin da Arewa babu wani abin azo aga...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>@user Kaga wani Adu ar BandaðŸ’”ðŸ˜­ wai a haka Shi ...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>@user Sai haquri fa yan madrid daman kunce cha...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>@user Hmmm yanzu kai kasan girman allah daxaka...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>@user @user Wai gwamno nin Nigeria suna afa kw...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               tweet     label\n",
       "0  @user Da kudin da Arewa babu wani abin azo aga...  negative\n",
       "1  @user Kaga wani Adu ar BandaðŸ’”ðŸ˜­ wai a haka Shi ...  negative\n",
       "2  @user Sai haquri fa yan madrid daman kunce cha...  negative\n",
       "3  @user Hmmm yanzu kai kasan girman allah daxaka...  negative\n",
       "4  @user @user Wai gwamno nin Nigeria suna afa kw...  negative"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4d4ea0b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-18T16:40:34.722441Z",
     "iopub.status.busy": "2024-07-18T16:40:34.722053Z",
     "iopub.status.idle": "2024-07-18T16:40:34.733652Z",
     "shell.execute_reply": "2024-07-18T16:40:34.732274Z"
    },
    "papermill": {
     "duration": 0.022364,
     "end_time": "2024-07-18T16:40:34.736248",
     "exception": false,
     "start_time": "2024-07-18T16:40:34.713884",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ah su rahama za axha madara sa lemu fah mudai ...</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tohh allah shi taimaka</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>allah ubangiji yakara maka lapia da tsawon ray...</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>wannan shine gaskiyar lamari domin siyasar nig...</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>alhamdulillah allah tabbatar dan isar maulatii...</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               tweet     label\n",
       "0  ah su rahama za axha madara sa lemu fah mudai ...  positive\n",
       "1                             tohh allah shi taimaka  positive\n",
       "2  allah ubangiji yakara maka lapia da tsawon ray...  positive\n",
       "3  wannan shine gaskiyar lamari domin siyasar nig...  positive\n",
       "4  alhamdulillah allah tabbatar dan isar maulatii...  positive"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d68ef904",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-18T16:40:34.751663Z",
     "iopub.status.busy": "2024-07-18T16:40:34.750906Z",
     "iopub.status.idle": "2024-07-18T16:40:34.759889Z",
     "shell.execute_reply": "2024-07-18T16:40:34.758802Z"
    },
    "papermill": {
     "duration": 0.01939,
     "end_time": "2024-07-18T16:40:34.762398",
     "exception": false,
     "start_time": "2024-07-18T16:40:34.743008",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method Series.unique of 0        negative\n",
       "1        negative\n",
       "2        negative\n",
       "3        negative\n",
       "4        negative\n",
       "           ...   \n",
       "14167    positive\n",
       "14168    positive\n",
       "14169    positive\n",
       "14170    positive\n",
       "14171    positive\n",
       "Name: label, Length: 14172, dtype: object>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data['label'].unique"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ba02dedf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-18T16:40:34.777522Z",
     "iopub.status.busy": "2024-07-18T16:40:34.777051Z",
     "iopub.status.idle": "2024-07-18T16:40:34.792074Z",
     "shell.execute_reply": "2024-07-18T16:40:34.790714Z"
    },
    "papermill": {
     "duration": 0.025564,
     "end_time": "2024-07-18T16:40:34.794595",
     "exception": false,
     "start_time": "2024-07-18T16:40:34.769031",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>word</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>da</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>allah</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ya</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ba</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    word\n",
       "0     da\n",
       "1  allah\n",
       "2     ya\n",
       "3      a\n",
       "4     ba"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load stop words\n",
    "stop_words = pd.read_csv('/kaggle/input/naijasenti-hausa/hau_stop.csv')\n",
    "stop_word_list = stop_words['word'].tolist()  \n",
    "stop_words.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2bf977e7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-18T16:40:34.810841Z",
     "iopub.status.busy": "2024-07-18T16:40:34.809869Z",
     "iopub.status.idle": "2024-07-18T16:40:36.746028Z",
     "shell.execute_reply": "2024-07-18T16:40:36.744987Z"
    },
    "papermill": {
     "duration": 1.94742,
     "end_time": "2024-07-18T16:40:36.749081",
     "exception": false,
     "start_time": "2024-07-18T16:40:34.801661",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Text preprocessing and vectorization\n",
    "vectorizer = TfidfVectorizer(max_features=1000, stop_words=stop_word_list, ngram_range=(1,3))\n",
    "X_train = vectorizer.fit_transform(train_data['tweet'])\n",
    "y_train = train_data['label']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "68a643db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-18T16:40:36.764933Z",
     "iopub.status.busy": "2024-07-18T16:40:36.764533Z",
     "iopub.status.idle": "2024-07-18T16:40:36.850436Z",
     "shell.execute_reply": "2024-07-18T16:40:36.849176Z"
    },
    "papermill": {
     "duration": 0.09715,
     "end_time": "2024-07-18T16:40:36.853203",
     "exception": false,
     "start_time": "2024-07-18T16:40:36.756053",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>MultinomialNB()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MultinomialNB</label><div class=\"sk-toggleable__content\"><pre>MultinomialNB()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "MultinomialNB()"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Train model\n",
    "model = MultinomialNB()\n",
    "model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4296305a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-18T16:40:36.869450Z",
     "iopub.status.busy": "2024-07-18T16:40:36.869040Z",
     "iopub.status.idle": "2024-07-18T16:40:37.090261Z",
     "shell.execute_reply": "2024-07-18T16:40:37.088923Z"
    },
    "papermill": {
     "duration": 0.232625,
     "end_time": "2024-07-18T16:40:37.093199",
     "exception": false,
     "start_time": "2024-07-18T16:40:36.860574",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Evaluate on test set\n",
    "X_test = vectorizer.transform(test_data['tweet'])\n",
    "y_test = test_data['label']\n",
    "predictions = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b56ed63e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-18T16:40:37.109526Z",
     "iopub.status.busy": "2024-07-18T16:40:37.108979Z",
     "iopub.status.idle": "2024-07-18T16:40:37.293545Z",
     "shell.execute_reply": "2024-07-18T16:40:37.292056Z"
    },
    "papermill": {
     "duration": 0.196357,
     "end_time": "2024-07-18T16:40:37.296735",
     "exception": false,
     "start_time": "2024-07-18T16:40:37.100378",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.6543465962662643\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "    negative       0.61      0.65      0.63      1759\n",
      "     neutral       0.60      0.62      0.61      1789\n",
      "    positive       0.76      0.69      0.72      1755\n",
      "\n",
      "    accuracy                           0.65      5303\n",
      "   macro avg       0.66      0.65      0.66      5303\n",
      "weighted avg       0.66      0.65      0.66      5303\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"Accuracy:\", accuracy_score(y_test, predictions))\n",
    "print(classification_report(y_test, predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e7bea272",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-18T16:40:37.314206Z",
     "iopub.status.busy": "2024-07-18T16:40:37.313355Z",
     "iopub.status.idle": "2024-07-18T16:40:37.533441Z",
     "shell.execute_reply": "2024-07-18T16:40:37.532148Z"
    },
    "papermill": {
     "duration": 0.232066,
     "end_time": "2024-07-18T16:40:37.536330",
     "exception": false,
     "start_time": "2024-07-18T16:40:37.304264",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Evaluate on test set\n",
    "X_test = vectorizer.transform(test_data['tweet'])\n",
    "y_test = test_data['label']\n",
    "predictions = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3705620a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-18T16:40:37.553881Z",
     "iopub.status.busy": "2024-07-18T16:40:37.553497Z",
     "iopub.status.idle": "2024-07-18T16:40:37.637336Z",
     "shell.execute_reply": "2024-07-18T16:40:37.636237Z"
    },
    "papermill": {
     "duration": 0.095563,
     "end_time": "2024-07-18T16:40:37.640210",
     "exception": false,
     "start_time": "2024-07-18T16:40:37.544647",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Calculate precision and recall\n",
    "precision = precision_score(y_test, predictions, average='weighted')\n",
    "recall = recall_score(y_test, predictions, average='weighted')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "fb416f00",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-18T16:40:37.657223Z",
     "iopub.status.busy": "2024-07-18T16:40:37.656833Z",
     "iopub.status.idle": "2024-07-18T16:40:37.662968Z",
     "shell.execute_reply": "2024-07-18T16:40:37.661839Z"
    },
    "papermill": {
     "duration": 0.018766,
     "end_time": "2024-07-18T16:40:37.666487",
     "exception": false,
     "start_time": "2024-07-18T16:40:37.647721",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision: 0.6595140007509134\n",
      "Recall: 0.6543465962662643\n"
     ]
    }
   ],
   "source": [
    "print(f'Precision: {precision}')\n",
    "print(f'Recall: {recall}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d40e9d43",
   "metadata": {
    "papermill": {
     "duration": 0.006952,
     "end_time": "2024-07-18T16:40:37.680699",
     "exception": false,
     "start_time": "2024-07-18T16:40:37.673747",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5276976,
     "sourceId": 8779545,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9.573894,
   "end_time": "2024-07-18T16:40:38.310508",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-18T16:40:28.736614",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
