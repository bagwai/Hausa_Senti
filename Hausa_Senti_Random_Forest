{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "16e3f69a",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-11T07:48:38.328560Z",
     "iopub.status.busy": "2024-07-11T07:48:38.328169Z",
     "iopub.status.idle": "2024-07-11T07:48:39.215543Z",
     "shell.execute_reply": "2024-07-11T07:48:39.214426Z"
    },
    "papermill": {
     "duration": 0.896491,
     "end_time": "2024-07-11T07:48:39.218216",
     "exception": false,
     "start_time": "2024-07-11T07:48:38.321725",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/hau_stop.csv\n",
      "/kaggle/input/hau/hau/test.tsv\n",
      "/kaggle/input/hau/hau/dev.tsv\n",
      "/kaggle/input/hau/hau/train.tsv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bc82f176",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:48:39.228681Z",
     "iopub.status.busy": "2024-07-11T07:48:39.228190Z",
     "iopub.status.idle": "2024-07-11T07:48:40.799525Z",
     "shell.execute_reply": "2024-07-11T07:48:40.798463Z"
    },
    "papermill": {
     "duration": 1.579322,
     "end_time": "2024-07-11T07:48:40.802163",
     "exception": false,
     "start_time": "2024-07-11T07:48:39.222841",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import GridSearchCV, train_test_split\n",
    "from sklearn.metrics import classification_report, accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "99240e3f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:48:40.811984Z",
     "iopub.status.busy": "2024-07-11T07:48:40.811613Z",
     "iopub.status.idle": "2024-07-11T07:48:40.953547Z",
     "shell.execute_reply": "2024-07-11T07:48:40.952550Z"
    },
    "papermill": {
     "duration": 0.149756,
     "end_time": "2024-07-11T07:48:40.956109",
     "exception": false,
     "start_time": "2024-07-11T07:48:40.806353",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data = pd.read_csv('/kaggle/input/hau/hau/train.tsv', sep='\\t')\n",
    "dev_data = pd.read_csv('/kaggle/input/hau/hau/dev.tsv', sep='\\t')\n",
    "test_data = pd.read_csv('/kaggle/input/hau/hau/train.tsv', sep='\\t')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9f9a3062",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:48:40.966112Z",
     "iopub.status.busy": "2024-07-11T07:48:40.965716Z",
     "iopub.status.idle": "2024-07-11T07:48:40.984457Z",
     "shell.execute_reply": "2024-07-11T07:48:40.983457Z"
    },
    "papermill": {
     "duration": 0.026276,
     "end_time": "2024-07-11T07:48:40.986697",
     "exception": false,
     "start_time": "2024-07-11T07:48:40.960421",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>@user Da kudin da Arewa babu wani abin azo aga...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>@user Kaga wani Adu ar BandaðŸ’”ðŸ˜­ wai a haka Shi ...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>@user Sai haquri fa yan madrid daman kunce cha...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>@user Hmmm yanzu kai kasan girman allah daxaka...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>@user @user Wai gwamno nin Nigeria suna afa kw...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               tweet     label\n",
       "0  @user Da kudin da Arewa babu wani abin azo aga...  negative\n",
       "1  @user Kaga wani Adu ar BandaðŸ’”ðŸ˜­ wai a haka Shi ...  negative\n",
       "2  @user Sai haquri fa yan madrid daman kunce cha...  negative\n",
       "3  @user Hmmm yanzu kai kasan girman allah daxaka...  negative\n",
       "4  @user @user Wai gwamno nin Nigeria suna afa kw...  negative"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7ea9ba56",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:48:40.996808Z",
     "iopub.status.busy": "2024-07-11T07:48:40.996462Z",
     "iopub.status.idle": "2024-07-11T07:48:41.006742Z",
     "shell.execute_reply": "2024-07-11T07:48:41.005658Z"
    },
    "papermill": {
     "duration": 0.018043,
     "end_time": "2024-07-11T07:48:41.009130",
     "exception": false,
     "start_time": "2024-07-11T07:48:40.991087",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>@user Da kudin da Arewa babu wani abin azo aga...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>@user Kaga wani Adu ar BandaðŸ’”ðŸ˜­ wai a haka Shi ...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>@user Sai haquri fa yan madrid daman kunce cha...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>@user Hmmm yanzu kai kasan girman allah daxaka...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>@user @user Wai gwamno nin Nigeria suna afa kw...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               tweet     label\n",
       "0  @user Da kudin da Arewa babu wani abin azo aga...  negative\n",
       "1  @user Kaga wani Adu ar BandaðŸ’”ðŸ˜­ wai a haka Shi ...  negative\n",
       "2  @user Sai haquri fa yan madrid daman kunce cha...  negative\n",
       "3  @user Hmmm yanzu kai kasan girman allah daxaka...  negative\n",
       "4  @user @user Wai gwamno nin Nigeria suna afa kw...  negative"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "af8fe24c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:48:41.020073Z",
     "iopub.status.busy": "2024-07-11T07:48:41.019697Z",
     "iopub.status.idle": "2024-07-11T07:48:41.028369Z",
     "shell.execute_reply": "2024-07-11T07:48:41.027327Z"
    },
    "papermill": {
     "duration": 0.016972,
     "end_time": "2024-07-11T07:48:41.030891",
     "exception": false,
     "start_time": "2024-07-11T07:48:41.013919",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method Series.unique of 0        negative\n",
       "1        negative\n",
       "2        negative\n",
       "3        negative\n",
       "4        negative\n",
       "           ...   \n",
       "14167    positive\n",
       "14168    positive\n",
       "14169    positive\n",
       "14170    positive\n",
       "14171    positive\n",
       "Name: label, Length: 14172, dtype: object>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data['label'].unique"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d51c2d1e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:48:41.041820Z",
     "iopub.status.busy": "2024-07-11T07:48:41.041470Z",
     "iopub.status.idle": "2024-07-11T07:48:41.054727Z",
     "shell.execute_reply": "2024-07-11T07:48:41.053497Z"
    },
    "papermill": {
     "duration": 0.021543,
     "end_time": "2024-07-11T07:48:41.057085",
     "exception": false,
     "start_time": "2024-07-11T07:48:41.035542",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>word</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>da</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>allah</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ya</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ba</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    word\n",
       "0     da\n",
       "1  allah\n",
       "2     ya\n",
       "3      a\n",
       "4     ba"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load stop words\n",
    "stop_words = pd.read_csv('/kaggle/input/hau_stop.csv')\n",
    "stop_word_list = stop_words['word'].tolist()  \n",
    "stop_words.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "567c8201",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:48:41.068460Z",
     "iopub.status.busy": "2024-07-11T07:48:41.068011Z",
     "iopub.status.idle": "2024-07-11T07:48:41.386194Z",
     "shell.execute_reply": "2024-07-11T07:48:41.385226Z"
    },
    "papermill": {
     "duration": 0.32713,
     "end_time": "2024-07-11T07:48:41.389207",
     "exception": false,
     "start_time": "2024-07-11T07:48:41.062077",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "vectorizer = TfidfVectorizer(max_features=1000, stop_words=stop_word_list)\n",
    "X_train = vectorizer.fit_transform(train_data['tweet'])\n",
    "y_train = train_data['label']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6ea33fde",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:48:41.400673Z",
     "iopub.status.busy": "2024-07-11T07:48:41.400275Z",
     "iopub.status.idle": "2024-07-11T07:48:41.405818Z",
     "shell.execute_reply": "2024-07-11T07:48:41.404680Z"
    },
    "papermill": {
     "duration": 0.014004,
     "end_time": "2024-07-11T07:48:41.408184",
     "exception": false,
     "start_time": "2024-07-11T07:48:41.394180",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "param_grid = {\n",
    "    'n_estimators': [100, 200, 300],  # Number of trees in the forest\n",
    "    'max_depth': [None, 10, 20, 30],  # Maximum number of levels in each tree\n",
    "    'min_samples_split': [2, 5, 10]   # Minimum number of samples required to split an internal node\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f330aebf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:48:41.419657Z",
     "iopub.status.busy": "2024-07-11T07:48:41.419253Z",
     "iopub.status.idle": "2024-07-11T07:55:34.974774Z",
     "shell.execute_reply": "2024-07-11T07:55:34.973470Z"
    },
    "papermill": {
     "duration": 413.568484,
     "end_time": "2024-07-11T07:55:34.981733",
     "exception": false,
     "start_time": "2024-07-11T07:48:41.413249",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 36 candidates, totalling 180 fits\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=RandomForestClassifier(random_state=42), n_jobs=-1,\n",
       "             param_grid={&#x27;max_depth&#x27;: [None, 10, 20, 30],\n",
       "                         &#x27;min_samples_split&#x27;: [2, 5, 10],\n",
       "                         &#x27;n_estimators&#x27;: [100, 200, 300]},\n",
       "             verbose=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=RandomForestClassifier(random_state=42), n_jobs=-1,\n",
       "             param_grid={&#x27;max_depth&#x27;: [None, 10, 20, 30],\n",
       "                         &#x27;min_samples_split&#x27;: [2, 5, 10],\n",
       "                         &#x27;n_estimators&#x27;: [100, 200, 300]},\n",
       "             verbose=2)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "GridSearchCV(cv=5, estimator=RandomForestClassifier(random_state=42), n_jobs=-1,\n",
       "             param_grid={'max_depth': [None, 10, 20, 30],\n",
       "                         'min_samples_split': [2, 5, 10],\n",
       "                         'n_estimators': [100, 200, 300]},\n",
       "             verbose=2)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf = RandomForestClassifier(random_state=42)\n",
    "grid_search = GridSearchCV(estimator=rf, param_grid=param_grid, cv=5, verbose=2, n_jobs=-1)\n",
    "grid_search.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "05d36fb7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:55:34.993792Z",
     "iopub.status.busy": "2024-07-11T07:55:34.993408Z",
     "iopub.status.idle": "2024-07-11T07:55:34.999917Z",
     "shell.execute_reply": "2024-07-11T07:55:34.998518Z"
    },
    "papermill": {
     "duration": 0.015371,
     "end_time": "2024-07-11T07:55:35.002116",
     "exception": false,
     "start_time": "2024-07-11T07:55:34.986745",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters: {'max_depth': None, 'min_samples_split': 10, 'n_estimators': 200}\n",
      "Best cross-validation score: 0.64\n"
     ]
    }
   ],
   "source": [
    "# Best parameters and best score\n",
    "print(\"Best parameters:\", grid_search.best_params_)\n",
    "print(\"Best cross-validation score: {:.2f}\".format(grid_search.best_score_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f1169468",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:55:35.013968Z",
     "iopub.status.busy": "2024-07-11T07:55:35.013575Z",
     "iopub.status.idle": "2024-07-11T07:55:35.260126Z",
     "shell.execute_reply": "2024-07-11T07:55:35.259001Z"
    },
    "papermill": {
     "duration": 0.255446,
     "end_time": "2024-07-11T07:55:35.262685",
     "exception": false,
     "start_time": "2024-07-11T07:55:35.007239",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_test = vectorizer.transform(test_data['tweet'])\n",
    "y_test = test_data['label']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0dd319d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:55:35.276042Z",
     "iopub.status.busy": "2024-07-11T07:55:35.275661Z",
     "iopub.status.idle": "2024-07-11T07:55:37.616924Z",
     "shell.execute_reply": "2024-07-11T07:55:37.615822Z"
    },
    "papermill": {
     "duration": 2.352014,
     "end_time": "2024-07-11T07:55:37.619975",
     "exception": false,
     "start_time": "2024-07-11T07:55:35.267961",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "    negative       0.97      0.94      0.95      4573\n",
      "     neutral       0.91      0.97      0.94      4912\n",
      "    positive       0.97      0.94      0.96      4687\n",
      "\n",
      "    accuracy                           0.95     14172\n",
      "   macro avg       0.95      0.95      0.95     14172\n",
      "weighted avg       0.95      0.95      0.95     14172\n",
      "\n"
     ]
    }
   ],
   "source": [
    "best_model = grid_search.best_estimator_\n",
    "predictions = best_model.predict(X_test)\n",
    "print(classification_report(y_test, predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b0fe007f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-11T07:55:37.632945Z",
     "iopub.status.busy": "2024-07-11T07:55:37.632598Z",
     "iopub.status.idle": "2024-07-11T07:55:37.653267Z",
     "shell.execute_reply": "2024-07-11T07:55:37.652093Z"
    },
    "papermill": {
     "duration": 0.029556,
     "end_time": "2024-07-11T07:55:37.655485",
     "exception": false,
     "start_time": "2024-07-11T07:55:37.625929",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9506773920406435\n"
     ]
    }
   ],
   "source": [
    "print(\"Accuracy:\", accuracy_score(y_test, predictions))\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5276976,
     "sourceId": 8779545,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 424.647221,
   "end_time": "2024-07-11T07:55:40.282475",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-11T07:48:35.635254",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
