{"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8779545,"sourceType":"datasetVersion","datasetId":5276976}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"},"papermill":{"default_parameters":{},"duration":7.523933,"end_time":"2024-06-25T06:47:19.778114","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-06-25T06:47:12.254181","version":"2.5.0"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","papermill":{"duration":0.944737,"end_time":"2024-06-25T06:47:16.599175","exception":false,"start_time":"2024-06-25T06:47:15.654438","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-11T12:15:45.691155Z","iopub.execute_input":"2024-07-11T12:15:45.691584Z","iopub.status.idle":"2024-07-11T12:15:46.140122Z","shell.execute_reply.started":"2024-07-11T12:15:45.691549Z","shell.execute_reply":"2024-07-11T12:15:46.138953Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/hau_stop.csv\n/kaggle/input/hau/hau/test.tsv\n/kaggle/input/hau/hau/dev.tsv\n/kaggle/input/hau/hau/train.tsv\n","output_type":"stream"}]},{"cell_type":"code","source":"!pip install keras","metadata":{"execution":{"iopub.status.busy":"2024-07-11T12:15:46.142198Z","iopub.execute_input":"2024-07-11T12:15:46.142653Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stdout","text":"Requirement already satisfied: keras in /opt/conda/lib/python3.10/site-packages (3.3.3)\nRequirement already satisfied: absl-py in /opt/conda/lib/python3.10/site-packages (from keras) (1.4.0)\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from keras) (1.26.4)\nRequirement already satisfied: rich in /opt/conda/lib/python3.10/site-packages (from keras) (13.7.0)\nRequirement already satisfied: namex in /opt/conda/lib/python3.10/site-packages (from keras) (0.0.8)\nRequirement already satisfied: h5py in /opt/conda/lib/python3.10/site-packages (from keras) (3.10.0)\nRequirement already satisfied: optree in /opt/conda/lib/python3.10/site-packages (from keras) (0.11.0)\nRequirement already satisfied: ml-dtypes in /opt/conda/lib/python3.10/site-packages (from keras) (0.2.0)\nRequirement already satisfied: typing-extensions>=4.0.0 in /opt/conda/lib/python3.10/site-packages (from optree->keras) (4.9.0)\nRequirement already satisfied: markdown-it-py>=2.2.0 in /opt/conda/lib/python3.10/site-packages (from rich->keras) (3.0.0)\nRequirement already satisfied: pygments<3.0.0,>=2.13.0 in /opt/conda/lib/python3.10/site-packages (from rich->keras) (2.17.2)\nRequirement already satisfied: mdurl~=0.1 in /opt/conda/lib/python3.10/site-packages (from markdown-it-py>=2.2.0->rich->keras) (0.1.2)\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, SpatialDropout1D\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom sklearn.preprocessing import LabelEncoder\nfrom tensorflow.keras.utils import to_categorical","metadata":{"papermill":{"duration":1.306795,"end_time":"2024-06-25T06:47:17.911421","exception":false,"start_time":"2024-06-25T06:47:16.604626","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data = pd.read_csv('/kaggle/input/hau/hau/train.tsv', sep='\\t')\ndev_data = pd.read_csv('/kaggle/input/hau/hau/dev.tsv', sep='\\t')\ntest_data = pd.read_csv('/kaggle/input/hau/hau/train.tsv', sep='\\t')","metadata":{"papermill":{"duration":0.151351,"end_time":"2024-06-25T06:47:18.067791","exception":false,"start_time":"2024-06-25T06:47:17.91644","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data.head()","metadata":{"papermill":{"duration":0.030423,"end_time":"2024-06-25T06:47:18.103195","exception":false,"start_time":"2024-06-25T06:47:18.072772","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_data.head()","metadata":{"papermill":{"duration":0.020949,"end_time":"2024-06-25T06:47:18.129318","exception":false,"start_time":"2024-06-25T06:47:18.108369","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data['label'].unique","metadata":{"papermill":{"duration":0.018726,"end_time":"2024-06-25T06:47:18.15352","exception":false,"start_time":"2024-06-25T06:47:18.134794","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Load stop words\nstop_words = pd.read_csv('/kaggle/input/hau_stop.csv')\nstop_word_list = stop_words['word'].tolist()  \nstop_words.head()","metadata":{"papermill":{"duration":0.02563,"end_time":"2024-06-25T06:47:18.184745","exception":false,"start_time":"2024-06-25T06:47:18.159115","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"tokenizer = Tokenizer(num_words=5000)\ntokenizer.fit_on_texts(train_data['tweet'])\nX_train = tokenizer.texts_to_sequences(train_data['tweet'])\nX_test = tokenizer.texts_to_sequences(test_data['tweet'])","metadata":{"papermill":{"duration":0.523439,"end_time":"2024-06-25T06:47:18.713949","exception":false,"start_time":"2024-06-25T06:47:18.19051","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Pad sequences\nmax_length = 100\nX_train = pad_sequences(X_train, maxlen=max_length)\nX_test = pad_sequences(X_test, maxlen=max_length)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Prepare target labels\nlabel_encoder = LabelEncoder()\ny_train = label_encoder.fit_transform(train_data['label'])\ny_train = to_categorical(y_train)\ny_test = label_encoder.transform(test_data['label'])\ny_test = to_categorical(y_test)","metadata":{"papermill":{"duration":0.094808,"end_time":"2024-06-25T06:47:18.814626","exception":false,"start_time":"2024-06-25T06:47:18.719818","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Define the LSTM model\nmodel = Sequential()\nmodel.add(Embedding(input_dim=5000, output_dim=128))\nmodel.add(SpatialDropout1D(0.2))\nmodel.add(LSTM(100, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(3, activation='softmax'))  # Assuming there are 3 sentiment labels","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Compile the model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n# Train the model\nmodel.fit(X_train, y_train, epochs=5, batch_size=64, validation_split=0.1)","metadata":{"papermill":{"duration":0.12958,"end_time":"2024-06-25T06:47:18.950239","exception":false,"start_time":"2024-06-25T06:47:18.820659","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Evaluate the model\nscore, acc = model.evaluate(X_test, y_test, verbose=0)\nprint(f'Test score: {score}, Test accuracy: {acc}')","metadata":{"papermill":{"duration":0.192375,"end_time":"2024-06-25T06:47:19.149392","exception":false,"start_time":"2024-06-25T06:47:18.957017","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]}]}