{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "08625cbe",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-15T09:44:33.536194Z",
     "iopub.status.busy": "2024-07-15T09:44:33.535757Z",
     "iopub.status.idle": "2024-07-15T09:44:34.617726Z",
     "shell.execute_reply": "2024-07-15T09:44:34.616010Z"
    },
    "papermill": {
     "duration": 1.093286,
     "end_time": "2024-07-15T09:44:34.620889",
     "exception": false,
     "start_time": "2024-07-15T09:44:33.527603",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/hau_stop.csv\n",
      "/kaggle/input/hau/hau/test.tsv\n",
      "/kaggle/input/hau/hau/dev.tsv\n",
      "/kaggle/input/hau/hau/train.tsv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    " \n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c52b379c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T09:44:34.635263Z",
     "iopub.status.busy": "2024-07-15T09:44:34.634692Z",
     "iopub.status.idle": "2024-07-15T09:44:51.438658Z",
     "shell.execute_reply": "2024-07-15T09:44:51.437066Z"
    },
    "papermill": {
     "duration": 16.814571,
     "end_time": "2024-07-15T09:44:51.441852",
     "exception": false,
     "start_time": "2024-07-15T09:44:34.627281",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: keras in /opt/conda/lib/python3.10/site-packages (3.4.1)\r\n",
      "Requirement already satisfied: absl-py in /opt/conda/lib/python3.10/site-packages (from keras) (1.4.0)\r\n",
      "Requirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from keras) (1.26.4)\r\n",
      "Requirement already satisfied: rich in /opt/conda/lib/python3.10/site-packages (from keras) (13.7.0)\r\n",
      "Requirement already satisfied: namex in /opt/conda/lib/python3.10/site-packages (from keras) (0.0.8)\r\n",
      "Requirement already satisfied: h5py in /opt/conda/lib/python3.10/site-packages (from keras) (3.10.0)\r\n",
      "Requirement already satisfied: optree in /opt/conda/lib/python3.10/site-packages (from keras) (0.12.1)\r\n",
      "Requirement already satisfied: ml-dtypes in /opt/conda/lib/python3.10/site-packages (from keras) (0.2.0)\r\n",
      "Requirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from keras) (21.3)\r\n",
      "Requirement already satisfied: typing-extensions>=4.5.0 in /opt/conda/lib/python3.10/site-packages (from optree->keras) (4.9.0)\r\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->keras) (3.1.1)\r\n",
      "Requirement already satisfied: markdown-it-py>=2.2.0 in /opt/conda/lib/python3.10/site-packages (from rich->keras) (3.0.0)\r\n",
      "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /opt/conda/lib/python3.10/site-packages (from rich->keras) (2.17.2)\r\n",
      "Requirement already satisfied: mdurl~=0.1 in /opt/conda/lib/python3.10/site-packages (from markdown-it-py>=2.2.0->rich->keras) (0.1.2)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install keras"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5605b4ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T09:44:51.456769Z",
     "iopub.status.busy": "2024-07-15T09:44:51.456301Z",
     "iopub.status.idle": "2024-07-15T09:45:09.058446Z",
     "shell.execute_reply": "2024-07-15T09:45:09.057059Z"
    },
    "papermill": {
     "duration": 17.613182,
     "end_time": "2024-07-15T09:45:09.061505",
     "exception": false,
     "start_time": "2024-07-15T09:44:51.448323",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-07-15 09:44:53.977491: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-07-15 09:44:53.977643: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-07-15 09:44:54.174035: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Embedding, LSTM, Dense, SpatialDropout1D, Bidirectional, Dropout\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from tensorflow.keras.utils import to_categorical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0ca75e6d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T09:45:09.076391Z",
     "iopub.status.busy": "2024-07-15T09:45:09.075627Z",
     "iopub.status.idle": "2024-07-15T09:45:09.234813Z",
     "shell.execute_reply": "2024-07-15T09:45:09.233539Z"
    },
    "papermill": {
     "duration": 0.169943,
     "end_time": "2024-07-15T09:45:09.237850",
     "exception": false,
     "start_time": "2024-07-15T09:45:09.067907",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data = pd.read_csv('/kaggle/input/hau/hau/train.tsv', sep='\\t')\n",
    "dev_data = pd.read_csv('/kaggle/input/hau/hau/dev.tsv', sep='\\t')\n",
    "test_data = pd.read_csv('/kaggle/input/hau/hau/train.tsv', sep='\\t')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c71f9bea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T09:45:09.252788Z",
     "iopub.status.busy": "2024-07-15T09:45:09.252381Z",
     "iopub.status.idle": "2024-07-15T09:45:09.278300Z",
     "shell.execute_reply": "2024-07-15T09:45:09.276985Z"
    },
    "papermill": {
     "duration": 0.036804,
     "end_time": "2024-07-15T09:45:09.281104",
     "exception": false,
     "start_time": "2024-07-15T09:45:09.244300",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>@user Da kudin da Arewa babu wani abin azo aga...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>@user Kaga wani Adu ar Banda💔😭 wai a haka Shi ...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>@user Sai haquri fa yan madrid daman kunce cha...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>@user Hmmm yanzu kai kasan girman allah daxaka...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>@user @user Wai gwamno nin Nigeria suna afa kw...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               tweet     label\n",
       "0  @user Da kudin da Arewa babu wani abin azo aga...  negative\n",
       "1  @user Kaga wani Adu ar Banda💔😭 wai a haka Shi ...  negative\n",
       "2  @user Sai haquri fa yan madrid daman kunce cha...  negative\n",
       "3  @user Hmmm yanzu kai kasan girman allah daxaka...  negative\n",
       "4  @user @user Wai gwamno nin Nigeria suna afa kw...  negative"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9ab59019",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T09:45:09.296599Z",
     "iopub.status.busy": "2024-07-15T09:45:09.296179Z",
     "iopub.status.idle": "2024-07-15T09:45:09.308325Z",
     "shell.execute_reply": "2024-07-15T09:45:09.306874Z"
    },
    "papermill": {
     "duration": 0.023228,
     "end_time": "2024-07-15T09:45:09.311126",
     "exception": false,
     "start_time": "2024-07-15T09:45:09.287898",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>@user Da kudin da Arewa babu wani abin azo aga...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>@user Kaga wani Adu ar Banda💔😭 wai a haka Shi ...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>@user Sai haquri fa yan madrid daman kunce cha...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>@user Hmmm yanzu kai kasan girman allah daxaka...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>@user @user Wai gwamno nin Nigeria suna afa kw...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               tweet     label\n",
       "0  @user Da kudin da Arewa babu wani abin azo aga...  negative\n",
       "1  @user Kaga wani Adu ar Banda💔😭 wai a haka Shi ...  negative\n",
       "2  @user Sai haquri fa yan madrid daman kunce cha...  negative\n",
       "3  @user Hmmm yanzu kai kasan girman allah daxaka...  negative\n",
       "4  @user @user Wai gwamno nin Nigeria suna afa kw...  negative"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ec1dbd96",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T09:45:09.327044Z",
     "iopub.status.busy": "2024-07-15T09:45:09.326622Z",
     "iopub.status.idle": "2024-07-15T09:45:09.336329Z",
     "shell.execute_reply": "2024-07-15T09:45:09.335041Z"
    },
    "papermill": {
     "duration": 0.02098,
     "end_time": "2024-07-15T09:45:09.339108",
     "exception": false,
     "start_time": "2024-07-15T09:45:09.318128",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method Series.unique of 0        negative\n",
       "1        negative\n",
       "2        negative\n",
       "3        negative\n",
       "4        negative\n",
       "           ...   \n",
       "14167    positive\n",
       "14168    positive\n",
       "14169    positive\n",
       "14170    positive\n",
       "14171    positive\n",
       "Name: label, Length: 14172, dtype: object>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data['label'].unique"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "effbd5f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T09:45:09.355528Z",
     "iopub.status.busy": "2024-07-15T09:45:09.355062Z",
     "iopub.status.idle": "2024-07-15T09:45:09.374158Z",
     "shell.execute_reply": "2024-07-15T09:45:09.372819Z"
    },
    "papermill": {
     "duration": 0.030813,
     "end_time": "2024-07-15T09:45:09.377069",
     "exception": false,
     "start_time": "2024-07-15T09:45:09.346256",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>word</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>da</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>allah</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ya</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ba</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    word\n",
       "0     da\n",
       "1  allah\n",
       "2     ya\n",
       "3      a\n",
       "4     ba"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load stop words\n",
    "stop_words = pd.read_csv('/kaggle/input/hau_stop.csv')\n",
    "stop_word_list = stop_words['word'].tolist()  \n",
    "stop_words.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "016e16e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T09:45:09.395047Z",
     "iopub.status.busy": "2024-07-15T09:45:09.394572Z",
     "iopub.status.idle": "2024-07-15T09:45:10.750862Z",
     "shell.execute_reply": "2024-07-15T09:45:10.749501Z"
    },
    "papermill": {
     "duration": 1.369296,
     "end_time": "2024-07-15T09:45:10.753785",
     "exception": false,
     "start_time": "2024-07-15T09:45:09.384489",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "tokenizer = Tokenizer(num_words=5000)\n",
    "tokenizer.fit_on_texts(train_data['tweet'])\n",
    "X_train = tokenizer.texts_to_sequences(train_data['tweet'])\n",
    "X_test = tokenizer.texts_to_sequences(test_data['tweet'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "af5438e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T09:45:10.770459Z",
     "iopub.status.busy": "2024-07-15T09:45:10.770067Z",
     "iopub.status.idle": "2024-07-15T09:45:10.925623Z",
     "shell.execute_reply": "2024-07-15T09:45:10.924110Z"
    },
    "papermill": {
     "duration": 0.167534,
     "end_time": "2024-07-15T09:45:10.928737",
     "exception": false,
     "start_time": "2024-07-15T09:45:10.761203",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Pad sequences\n",
    "max_length = 100\n",
    "X_train = pad_sequences(X_train, maxlen=max_length)\n",
    "X_test = pad_sequences(X_test, maxlen=max_length)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2bf4bf73",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T09:45:10.945550Z",
     "iopub.status.busy": "2024-07-15T09:45:10.945094Z",
     "iopub.status.idle": "2024-07-15T09:45:10.961234Z",
     "shell.execute_reply": "2024-07-15T09:45:10.959867Z"
    },
    "papermill": {
     "duration": 0.027805,
     "end_time": "2024-07-15T09:45:10.964140",
     "exception": false,
     "start_time": "2024-07-15T09:45:10.936335",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Prepare target labels\n",
    "label_encoder = LabelEncoder()\n",
    "y_train = label_encoder.fit_transform(train_data['label'])\n",
    "y_train = to_categorical(y_train)\n",
    "y_test = label_encoder.transform(test_data['label'])\n",
    "y_test = to_categorical(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "62c73dc5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T09:45:10.981055Z",
     "iopub.status.busy": "2024-07-15T09:45:10.980426Z",
     "iopub.status.idle": "2024-07-15T09:45:11.039447Z",
     "shell.execute_reply": "2024-07-15T09:45:11.038340Z"
    },
    "papermill": {
     "duration": 0.070602,
     "end_time": "2024-07-15T09:45:11.042244",
     "exception": false,
     "start_time": "2024-07-15T09:45:10.971642",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define the LSTM model\n",
    "model = Sequential()\n",
    "model.add(Embedding(input_dim=5000, output_dim=128))\n",
    "model.add(SpatialDropout1D(0.2))\n",
    "model.add(LSTM(100, dropout=0.2, recurrent_dropout=0.2))\n",
    "model.add(Dense(3, activation='softmax'))  # Assuming there are 3 sentiment labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4b3a5651",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T09:45:11.059017Z",
     "iopub.status.busy": "2024-07-15T09:45:11.058535Z",
     "iopub.status.idle": "2024-07-15T09:45:11.079619Z",
     "shell.execute_reply": "2024-07-15T09:45:11.078325Z"
    },
    "papermill": {
     "duration": 0.032902,
     "end_time": "2024-07-15T09:45:11.082600",
     "exception": false,
     "start_time": "2024-07-15T09:45:11.049698",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Compile the model\n",
    "model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3a6f332e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T09:45:11.100379Z",
     "iopub.status.busy": "2024-07-15T09:45:11.098832Z",
     "iopub.status.idle": "2024-07-15T09:50:06.415259Z",
     "shell.execute_reply": "2024-07-15T09:50:06.413853Z"
    },
    "papermill": {
     "duration": 295.32835,
     "end_time": "2024-07-15T09:50:06.418434",
     "exception": false,
     "start_time": "2024-07-15T09:45:11.090084",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 135ms/step - accuracy: 0.5105 - loss: 0.9564 - val_accuracy: 0.7447 - val_loss: 0.5949\n",
      "Epoch 2/10\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 130ms/step - accuracy: 0.7531 - loss: 0.5892 - val_accuracy: 0.8131 - val_loss: 0.5081\n",
      "Epoch 3/10\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 130ms/step - accuracy: 0.8191 - loss: 0.4645 - val_accuracy: 0.7673 - val_loss: 0.6537\n",
      "Epoch 4/10\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m27s\u001b[0m 133ms/step - accuracy: 0.8450 - loss: 0.3941 - val_accuracy: 0.7673 - val_loss: 0.7081\n",
      "Epoch 5/10\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 128ms/step - accuracy: 0.8693 - loss: 0.3462 - val_accuracy: 0.7595 - val_loss: 0.7556\n",
      "Epoch 6/10\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 131ms/step - accuracy: 0.8841 - loss: 0.3080 - val_accuracy: 0.7595 - val_loss: 0.7768\n",
      "Epoch 7/10\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 130ms/step - accuracy: 0.8890 - loss: 0.2822 - val_accuracy: 0.7595 - val_loss: 0.8296\n",
      "Epoch 8/10\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 130ms/step - accuracy: 0.9083 - loss: 0.2464 - val_accuracy: 0.7736 - val_loss: 0.8572\n",
      "Epoch 9/10\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 134ms/step - accuracy: 0.9173 - loss: 0.2193 - val_accuracy: 0.7701 - val_loss: 0.8900\n",
      "Epoch 10/10\n",
      "\u001b[1m200/200\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m27s\u001b[0m 133ms/step - accuracy: 0.9301 - loss: 0.1950 - val_accuracy: 0.7546 - val_loss: 0.9972\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.src.callbacks.history.History at 0x7817c3279c00>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# Train the model\n",
    "model.fit(X_train, y_train, epochs=10, batch_size=64, validation_split=0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ea563960",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-15T09:50:06.830732Z",
     "iopub.status.busy": "2024-07-15T09:50:06.830288Z",
     "iopub.status.idle": "2024-07-15T09:50:19.361936Z",
     "shell.execute_reply": "2024-07-15T09:50:19.360315Z"
    },
    "papermill": {
     "duration": 12.739457,
     "end_time": "2024-07-15T09:50:19.364626",
     "exception": false,
     "start_time": "2024-07-15T09:50:06.625169",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test score: 0.22929736971855164, Test accuracy: 0.9311317801475525\n"
     ]
    }
   ],
   "source": [
    "# Evaluate the model\n",
    "score, acc = model.evaluate(X_test, y_test, verbose=0)\n",
    "print(f'Test score: {score}, Test accuracy: {acc}')"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5276976,
     "sourceId": 8779545,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 351.270268,
   "end_time": "2024-07-15T09:50:21.397927",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-15T09:44:30.127659",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
